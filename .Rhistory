golem_package_name = NULL,
cache = TRUE,
gh_pat = NULL,
max_sessions = Inf)
shiny::runApp('C:/Users/BZunguze/OneDrive - ACQUABUILD/APPS 2022/BASELINE/DELETE')
library(polished)
deploy_app("semea",
app_dir = ".",
api_key = "SWy1B0tMYmqPTk9BnojCMw3o5leplM4x8L",
launch_browser = TRUE,
region = "us-east1",
ram_gb = 2,
r_ver = NULL,
tlmgr = character(0),
golem_package_name = NULL,
cache = TRUE,
gh_pat = NULL,
max_sessions = Inf)
polished::deploy_app(
app_name = "semea",
app_dir = "C:\\Users\\BZunguze\\OneDrive - ACQUABUILD\\APPS 2022\\BASELINE\\DELETE",
api_key = "SWy1B0tMYmqPTk9BnojCMw3o5leplM4x8L",
launch_browser = TRUE,
r_ver = NULL,
cache = TRUE,
gh_pat = NULL,
max_sessions = Inf
)
polished::deploy_app(
app_name = "semea",
app_dir = "C:/Users/BZunguze/OneDrive - ACQUABUILD/APPS 2022/BASELINE/DELETE",
api_key = "SWy1B0tMYmqPTk9BnojCMw3o5leplM4x8L",
launch_browser = TRUE,
r_ver = NULL,
cache = TRUE,
gh_pat = NULL,
max_sessions = Inf
)
polished::deploy_app(
app_name = "semea",
app_dir = "C:/Users/BZunguze/OneDrive - ACQUABUILD/APPS 2022/BASELINE/DELETE",
api_key = "iauwYBERG6C2NkMBaJVn47lQJeAVPgtsC9",
launch_browser = TRUE,
r_ver = NULL,
cache = TRUE,
gh_pat = NULL,
max_sessions = Inf
)
# library()
polished::deploy_app("semea",
app_dir = ".",
api_key = "iauwYBERG6C2NkMBaJVn47lQJeAVPgtsC9",
launch_browser = TRUE,
region = "us-east1",
ram_gb = 2,
r_ver = NULL,
tlmgr = character(0),
golem_package_name = NULL,
cache = TRUE,
gh_pat = NULL,
max_sessions = Inf )
install.packages("rsconnect")
rsconnect::setAccountInfo(name='semea',
token='ACB2D248B1F21F3DFB7A87CAC9411608',
secret='fiANfsHf7brYQgE5HDi3/1UO7OrP4mKSR3Y69ogr')
library(rsconnect)
rsconnect::deployApp('C:/Users/BZunguze/OneDrive - ACQUABUILD/APPS 2022/BASELINE/BASELINE_SHINY')
rsconnect::deployApp('C:/Users/BZunguze/OneDrive - ACQUABUILD/APPS 2022/BASELINE/BASELINE_SHINY')
library(rsconnect)
rsconnect::deployApp('C:/Users/BZunguze/OneDrive - ACQUABUILD/APPS 2022/BASELINE/BASELINE_SHINY')
polished::deploy_app("semea",
app_dir = ".",
api_key = "iauwYBERG6C2NkMBaJVn47lQJeAVPgtsC9",
launch_browser = TRUE,
region = "us-east1",
ram_gb = 2,
r_ver = NULL,
tlmgr = character(0),
golem_package_name = NULL,
cache = TRUE,
gh_pat = NULL,
max_sessions = Inf )
rsconnect::deployApp('C:/Users/BZunguze/OneDrive - ACQUABUILD/APPS 2022/BASELINE/BASELINE_SHINY')
polished::deploy_app("semea",
app_dir = ".",
api_key = "iauwYBERG6C2NkMBaJVn47lQJeAVPgtsC9",
launch_browser = TRUE,
region = "us-east1",
ram_gb = 2,
r_ver = NULL,
tlmgr = character(0),
golem_package_name = NULL,
cache = TRUE,
gh_pat = NULL,
max_sessions = Inf )
runApp()
polished::deploy_app("semea",
app_dir = ".",
api_key = "iauwYBERG6C2NkMBaJVn47lQJeAVPgtsC9",
launch_browser = TRUE,
region = "us-east1",
ram_gb = 4,
r_ver = NULL,
tlmgr = character(0),
golem_package_name = NULL,
cache = TRUE,
gh_pat = NULL,
max_sessions = Inf)
library(haven)
library(janitor)
library(tidyverse)
library(readxl)
library(lubridate)
library(fst)
library(collapse)
library(ggplot2)
library(highcharter)
library(bs4Dash)
library(bslib)
library(tmap)
library(mapview)
library(aws.s3)
library(DBI)
library(DT)
library(flextable)
library(fresh)
library(glue)
library(memoise)
library(openssl)
library(openxlsx)
library(plotly)
library(pool)
library(rmapshaper)
library(RPostgres)
library(scales)
library(sf)
library(shinyalert)
library(shinycssloaders)
library(shinyFeedback)
library(shinyFiles)
library(shinyjs)
library(shinymanager)
library(shinyvalidate)
library(shinyWidgets)
library(sodium)
library(sp)
library(stringr)
library(uuid)
library(shadowtext)
library(ggtext)
library(data.table)
library(shiny)
library(tmaptools)
library(raster)
library(openxlsx)
library(RColorBrewer)
options(viewer = NULL)
tmap_mode("view")
setwd("C:\\Users\\BZunguze\\OneDrive - ACQUABUILD\\APPS 2022\\BASELINE\\BASELINE_SHINY")
{
db2 <- 'semea'
host_db2 <- "semea.choww6kimn1s.eu-north-1.rds.amazonaws.com"
db_port2 <- '5432'
db_user2 <- "postgres"
db_password2 <- "FAR;2030,"
far_pool <- dbPool(RPostgres::Postgres(), dbname = db2, host=host_db2, port=db_port2, user=db_user2, password=db_password2)
} ### DATABASE CONNECTION
novos <- DBI::dbGetQuery(far_pool, "SELECT * FROM vistas.seleccao WHERE data BETWEEN '2024-01-01' AND CURRENT_DATE")
administrativa <- read_fst("administrativa.fst")
membros <- A1 %>% dplyr::filter(a00 == 1) %>%
dplyr::mutate(codigo = paste0(dist, upa,inq, af)) %>% dplyr::select(codigo, nome = a01, genero=a02, idade=a03) %>%
mutate(sexo = ifelse(genero == 1, "Homens", ifelse(genero == 2, "Mulheres", genero))) %>% dplyr::select(-genero)
localidades_recoding<- read_fst("C:/Users/BZunguze/OneDrive - ACQUABUILD/APPS 2022/BASELINE/BASELINE_SHINY/localidades_recoding.fst")
# write.fst(localidades_recoding, "C:/Users/BZunguze/OneDrive - ACQUABUILD/APPS 2022/BASELINE/BASELINE_SHINY/localidades_recoding.fst")
A1 <- haven::read_dta("C:/Users/BZunguze/OneDrive - ACQUABUILD/APPS 2022/BASELINE/Data/A1.dta")
Y1 <- haven::read_dta("C:/Users/BZunguze/OneDrive - ACQUABUILD/APPS 2022/BASELINE/Data/Y1.dta")
Y1$y10 <- as.character(Y1$y10)
Y1$k00 <- as.character(Y1$k00)
C09 <- haven::read_dta("C:/Users/BZunguze/OneDrive - ACQUABUILD/APPS 2022/BASELINE/Data/C09.dta")
# write.fst(selecionados, "selecionados.fst")
old_hh <- read_fst("selecionados.fst")
seleccao <- head(old_hh,10) %>% dplyr::bind_rows(novos) %>%
mutate(proposta = ifelse(is.na(proposta), "Assistência Integral", proposta))
# old_hh <- read_fst("selecionados.fst")
alcancados <-  old_hh %>% dplyr::bind_rows(novos)
realizados <- alcancados %>%
mutate(sexo = dplyr::case_when ((is.na(sexo)) ~ "Homens",
sexo %in% c("F", "Mulher", "NULL", "Mulheres", "Feminino", "Femenino",  "Não definido") ~ "Mulheres",
sexo %in% c("M", "Homem",  "Masculino") ~ "Homens",
TRUE ~ sexo)) %>%
mutate(faixa = dplyr::case_when (is.na(ano) ~ "Sem idade", ano < 1989 ~ "Adultos", ano >= 1989 ~ "Jovens", TRUE ~ "Sem idade")) %>%
mutate(faixa_genero = paste0(sexo, " ", faixa)) %>%
group_by(faixa_genero, posto_id) %>%
summarise(Beneficiarios = fndistinct(person_id)) %>%
pivot_wider(names_from = "faixa_genero", values_from = "Beneficiarios") %>%
adorn_totals("col") %>%
dplyr::filter(!is.na(posto_id))
adopcao <- C09 %>% mutate(across(everything(), as.character)) %>%
mutate(codigo = paste0(dist, upa, af, inq))
aprendeu <-adopcao%>%
group_by(c090a, c091) %>% summarize(n_distinct(codigo)) %>%
spread(c091, -c090a)
adoptou <- adopcao%>% dplyr::filter(!is.na(c098)) %>%
group_by(c090a, c098) %>% summarize(n_distinct(codigo)/2380) %>%
spread(c098, -c090a)
write.csv(adoptou, "C:/Users/BZunguze/OneDrive - ACQUABUILD/APPS 2022/ARCGIS BRIDGE/RESUMOS/adopta.csv")
write.csv(aprendeu, "C:/Users/BZunguze/OneDrive - ACQUABUILD/APPS 2022/ARCGIS BRIDGE/RESUMOS/aprendeu.csv")
write.csv(adoptou, "C:/Users/BZunguze/OneDrive - ACQUABUILD/APPS 2022/ARCGIS BRIDGE/RESUMOS/adoptou.csv")
F1 <- haven::read_dta("C:/Users/BZunguze/OneDrive - ACQUABUILD/APPS 2022/BASELINE/Data/F1.dta")
inquiridores <- read_excel("C:/Users/BZunguze/OneDrive - ACQUABUILD/APPS 2022/BASELINE/inquiridores.xlsx", sheet = "INQUIRIDORES")
inquiridores$inq <- as.numeric(inquiridores$id_inq)
inquiridores$prov <- as.character(inquiridores$prov)
Y1$y08[Y1$y08=="HARIANO"] <- "RIHANO"
Y1$y08[Y1$y08=="MARIENE  NGOMBI"] <- "MARIENE NGOMBI"
Y1$y08[Y1$y08=="NHANMUSSUA"] <- "INHAMUSSUA"
coordenada <- Y1 %>% dplyr::filter(!is.na(lat) & !is.na(lon)) %>% group_by(y08) %>% summarise(lat = mean(lat), long = mean(lon))
AF <- Y1 %>%
clean_names() %>% mutate(y12 = as.character(y12)) %>%
dplyr::mutate(hh_id = paste0(dist, upa,inq, af),
provincia_inq = haven::as_factor(prov),
dist = haven::as_factor(dist),
posto_administrativo = y03,
comunidade = y08,
hh_members = y11,
tratamento = dplyr::case_when(y12 == "1" ~ "Tratamento", y12 == "2" ~ "Controlo", TRUE ~ "Tratamento"),
cadeia_valor = dplyr::case_when(y10 == "3" ~ "Horticultura", y10 == "5" ~ "Mandioca", y10 == "4" ~ "Leguminosas", y10 == "2" ~ "Carnes Vermelhas", y10 == "1" ~ "Avicultura", TRUE ~ "Outras"),
antropometria = dplyr::case_when(k00 == "1" ~ "SIM", k00 == "2" ~ "Ausente", TRUE ~ "NÃO"),
data_entrevista = y06,
hora_inicial = y07a,
hora_final = y07b,
latitude = lat,
longitude = lon) %>%
left_join(inquiridores %>% dplyr::select(-prov), by = c("provincia_inq", "inq")) %>%
dplyr::select(provincia_inq, distrito = dist, posto_administrativo, localidade = y04, tratamento, id_inq, nome_inq,
cadeia_valor, antropometria, comunidade, hh_members, hora_inicial, hh_id, data_entrevista,
hora_final, latitude, longitude, sexo_inq, funcao_inq, contacto_inq)
AF_geocodes <- AF %>%
left_join(localidades_recoding %>% distinct(localidade, .keep_all = TRUE), by = "localidade", relationship = "many-to-many") %>%
mutate(admin_id = dplyr::case_when (comunidade == "NDUNDU" ~ 31202040,
comunidade == "COMUNIDADE 1"~ 21002020,
comunidade == "NTONHANE"~ 30202010,
comunidade == "MICOLONGO"~ 21002020,
comunidade == "LAMBUE"~ 31202040,
comunidade == "CAMUETSA"~ 31202040,
comunidade == "GOBA SEDE"~ 10030101, TRUE ~ admin_id)) %>%
left_join(administrativa %>% dplyr::select(admin_id = id, posto_id), by = "admin_id")
F1_Nutricao <- F1 %>%
clean_names() %>%
plyr::mutate(hh_id = paste0(dist, upa,inq, af),
provincia_inq = haven::as_factor(prov),
distrito = haven::as_factor(dist),
treino_nutricao = haven::as_factor(f100),
mulher_fertil = ifelse(is.na(haven::as_factor(f103a)), "NÃO","SIM"),
refeicoes_24_horas = as.numeric(f105))
F1_Nutricao <-F1_Nutricao %>% dplyr::select(hh_id:ncol(F1_Nutricao)) %>% dplyr::select(-provincia_inq, -distrito)
entrevistados <- AF %>% left_join(F1_Nutricao, by = "hh_id")
inquiridores$inq <- as.numeric(inquiridores$inq)
inquiridores$prov <- as.numeric(inquiridores$prov)
A1_texto <- A1 %>% clean_names() %>%
dplyr::mutate(hh_id = paste0(dist, upa,inq, af),
member_id = a00,  hh_member = a01,
prov = as.numeric(haven::as_factor(prov)),
dist = haven::as_factor(dist),
comunidade = haven::as_factor(upa),
inquiridor = as.character(haven::as_factor(inq)),
sexo = haven::as_factor(a02),
parentesco = haven::as_factor(a04),
estado_civil = haven::as_factor(a05),
etnia = haven::as_factor(a06),
idioma = haven::as_factor(a07),
deficiencia = haven::as_factor(a08),
vulnerabilidade = haven::as_factor(a09),
literado = haven::as_factor(a11),
educacao = haven::as_factor(a10))
A1_texto$inq <- as.numeric(A1_texto$inq)
A1_texto$prov<- as.numeric(A1_texto$prov)
A1_texto$a02<- as.character(A1_texto$a02)
A1_texto$anos<- as.numeric(A1_texto$a03)
dataset <- A1_texto %>%
left_join(inquiridores, by = c("inq", "prov")) %>%
mutate(sexo = case_when(a02 == "1" ~ "Homens", a02 == "2" ~ "Mulheres", TRUE ~ a02)) %>%
mutate(faixa = case_when(anos > 200  ~ 'Sem idade', anos < 5  ~ 'Menores', anos < 15  ~ 'Crianças', anos <=35  ~ 'Jovens', is.na(anos)  ~ 'Sem idade', TRUE  ~'Adultos')) %>%
dplyr::select(hh_id,member_id, hh_member, sexo, parentesco, estado_civil, etnia, idioma, literado, educacao, anos, faixa)
Respondentes <- entrevistados %>%
left_join(dataset, by = "hh_id") %>%
mutate(iniciado = (str_replace(hora_inicial, "(?=\\d{2}$)", ":")),
started = (str_replace(hora_inicial, "(?=\\d{2}$)", ":")),
completed = (str_replace(hora_final, "(?=\\d{2}$)", ":"))) %>%
separate(started, c('started_hour', 'started_minute')) %>%
separate(completed, c('completed_hour', 'completed_minute')) %>%
mutate(duracao_minutos = (as.numeric(completed_hour) + as.numeric(completed_minute)/60 - as.numeric(started_hour)+as.numeric(started_minute)/60)*60) %>%
dplyr::select(-started_hour, -started_minute, -completed_hour, -completed_minute, -hora_inicial, -hora_final) %>%
mutate(georefenciado = ifelse(!is.na(latitude), "SIM",  "NÃO"))
coordenadas <- Respondentes %>%
dplyr::select(distrito, localidade, comunidade, latitude, longitude) %>%
dplyr::filter(!is.na(latitude)) %>%
group_by(distrito, localidade, comunidade) %>% summarise(lat_estimada = mean(latitude), long_estimado = mean(longitude))
coordenadas_localidade <- Respondentes %>%
dplyr::select(distrito, localidade, latitude, longitude) %>%
dplyr::filter(!is.na(latitude)) %>%
group_by(distrito, localidade) %>% summarise(lat_estimada_localidade = mean(latitude), long_estimado_localidade = mean(longitude))
Respondentes <- Respondentes %>%
left_join(coordenadas, by = c("distrito", "localidade", "comunidade")) %>%
left_join(coordenadas_localidade, by = c("distrito", "localidade"))
Respondentes <- Respondentes %>% mutate(latitude = case_when(!is.na(latitude) ~ latitude, !is.na(lat_estimada) ~ lat_estimada, TRUE ~ lat_estimada_localidade),
longitude = case_when(!is.na(longitude) ~ longitude, !is.na(long_estimado) ~ long_estimado, TRUE ~ long_estimado_localidade)) %>%
mutate(provincia_inq = ifelse(provincia_inq == "Maputo Província", "MAPUTO", toupper(provincia_inq))) %>%
dplyr::select(-lat_estimada_localidade, -long_estimado_localidade, -lat_estimada, -long_estimado) %>%
dplyr::select(provincia = provincia_inq, codigo = hh_id, everything())
Respondentes <- Respondentes %>% left_join(coordenada %>% dplyr::select(comunidade = y08, lat, long), by = "comunidade") %>%
mutate(latitude = ifelse(is.na(latitude), lat, latitude),
longitude = ifelse(is.na(longitude), long, longitude))
respo <- Respondentes %>% dplyr::filter(!is.na(hh_members))
Respondentes <- Respondentes %>% left_join(localidades_recoding, by = "localidade", relationship = "many-to-many") %>%
mutate(admin_id = ifelse(!is.na(admin_id), admin_id, ifelse(comunidade == "NDUNDU", 31202040,
ifelse(comunidade == "COMUNIDADE 1", 21002020,
ifelse(comunidade == "NTONHANE", 30202010,
ifelse(comunidade == "MICOLONGO", 21002020,
ifelse(comunidade == "LAMBUE", 31202040,
ifelse(comunidade == "CAMUETSA", 31202040,
ifelse(comunidade == "GOBA SEDE", 10030101, admin_id)))))))))
coordenadas_estimadas <- AF_geocodes %>%
dplyr::select(distrito, localidade, comunidade, latitude, longitude) %>%
dplyr::filter(!is.na(latitude)) %>%
group_by(distrito, localidade, comunidade) %>% summarise(lat_estimada = mean(latitude), long_estimado = mean(longitude))
coordenadas_AF_geocodes <- AF_geocodes %>%
dplyr::select(distrito, localidade, comunidade, latitude, longitude) %>%
dplyr::filter(!is.na(latitude)) %>%
group_by(distrito, localidade, comunidade) %>% summarise(lat_estimada = mean(latitude), long_estimado = mean(longitude))
coordenadas_localidade_AF_geocodes <- AF_geocodes %>%
dplyr::select(distrito, localidade, latitude, longitude) %>%
dplyr::filter(!is.na(latitude)) %>%
group_by(distrito, localidade) %>% summarise(lat_estimada_localidade = mean(latitude), long_estimado_localidade = mean(longitude))
coordenadas_localidade_AF_geocodes <- AF_geocodes %>%
left_join(coordenadas_estimadas, by = c("distrito", "localidade", "comunidade")) %>%
left_join(coordenadas_localidade, by = c("distrito", "localidade"))
coordenadas_localidade_AF_geocodes <- coordenadas_localidade_AF_geocodes %>% mutate(latitude = case_when(!is.na(latitude) ~ latitude, !is.na(lat_estimada) ~ lat_estimada, TRUE ~ lat_estimada_localidade),
longitude = case_when(!is.na(longitude) ~ longitude, !is.na(long_estimado) ~ long_estimado, TRUE ~ long_estimado_localidade)) %>%
mutate(provincia_inq = ifelse(provincia_inq == "Maputo Província", "MAPUTO", toupper(provincia_inq))) %>%
dplyr::select(-lat_estimada_localidade, -long_estimado_localidade, -lat_estimada, -long_estimado) %>%
dplyr::select(provincia = provincia_inq, codigo = hh_id, everything())
coordinates <- AF_geocodes %>%
dplyr::filter(!is.na(latitude)) %>%
group_by(localidade, comunidade) %>%
summarize(ylat = mean(latitude), xlong = mean(longitude))
Geocoded_Households <- coordenadas_localidade_AF_geocodes %>%
left_join(coordinates %>% distinct(localidade, comunidade), by = c("comunidade", "localidade")) %>%
mutate(latitude = dplyr::case_when(is.na(latitude) & comunidade == "INHAMUSSUA"  ~ -23.89394,
is.na(latitude) & comunidade == "MARIENE NGOMBI"  ~ -26.13855,
is.na(latitude) & comunidade == "RIHANO"  ~ -24.86924,
TRUE ~ latitude),
longitude = dplyr::case_when(is.na(longitude) & comunidade == "INHAMUSSUA"  ~ 35.21399,
is.na(longitude) & comunidade == "MARIENE NGOMBI"  ~ 32.33892,
is.na(longitude) & comunidade == "RIHANO"  ~ 33.30665,
TRUE ~ longitude)) %>%
left_join(membros, by = "codigo")
write.fst(Geocoded_Households, "C:\\Users\\BZunguze\\OneDrive - ACQUABUILD\\APPS 2022\\BASELINE\\BASELINE_SHINY\\baseline_households.fst")
Baseline <- Geocoded_Households %>%
group_by(distrito, posto_id, posto_administrativo, tratamento) %>%
summarise(Beneficiarios =n_distinct(codigo)) %>%
pivot_wider(names_from = "tratamento", values_from = "Beneficiarios") %>%
mutate_if(is.numeric, ~replace_na(., 0)) %>%
mutate(Agregados = Tratamento + Controlo) %>% dplyr::filter(!is.na(posto_id))
mapear <- Respondentes %>% distinct(codigo, admin_id, tratamento, latitude, longitude, cadeia_valor, .keep_all = TRUE)
write.csv(mapear, "C:\\Users\\BZunguze\\OneDrive - ACQUABUILD\\APPS 2022\\BASELINE\\BASELINE_SHINY\\mapear.csv")
write.fst(Respondentes, "C:\\Users\\BZunguze\\OneDrive - ACQUABUILD\\APPS 2022\\BASELINE\\BASELINE_SHINY\\respondentes.fst")
write.csv(Respondentes, "C:\\Users\\BZunguze\\OneDrive - ACQUABUILD\\APPS 2022\\BASELINE\\BASELINE_SHINY\\gis_respondent.csv")
resposta <- Respondentes %>% dplyr::select(localidade, distrito, posto_administrativo)
write.csv(resposta , "C:\\Users\\BZunguze\\Desktop\\baseline.csv")
INHAMBANE <- Respondentes %>% dplyr::filter(provincia == "INHAMBANE")
write.csv(INHAMBANE, "C:\\Users\\BZunguze\\OneDrive - ACQUABUILD\\APPS 2022\\BASELINE\\BASELINE_SHINY\\Respond.csv")
meta <- read.fst("C:/Users/BZunguze/OneDrive - ACQUABUILD/APPS 2022/BASELINE/BASELINE_SHINY/metas.fst") %>%
mutate(provincia = toupper(provincia))
BLUE <- "#076fa2"
RED <- "#E3120B"
BLACK <- "#202020"
GREY <- "grey50"
respondentes <- Respondentes %>% mutate(categoria = provincia)
bullet_chart <- function(respondentes){
realizado <- Respondentes %>% group_by(categoria = provincia) %>% summarize(realizado = fndistinct(codigo))
targeted <- meta %>% group_by(categoria = provincia)  %>% summarize(meta = fsum(as.numeric(metas)))
realizacoes <- realizado %>% head(10) %>% left_join(targeted, by = "categoria")
realizacoes %>%  mutate(categoria := fct_reorder(categoria, realizado)) %>% head(10) %>%
ggplot(aes(x = realizado, y = categoria)) +
geom_col(aes(x = meta), fill = "gray") +
geom_col(width = 0.6, fill = "#008000") +
theme_minimal() +
theme(panel.grid.major.y = element_blank())+
theme_minimal() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x=element_blank(), axis.title.y=element_blank(),
plot.title = element_markdown(lineheight = 1.1),
legend.text = element_markdown(size = 15))+
labs(
title = " <span style='font-size:18pt; letter-spacing:30px'> **Inquérito de Avaliação de Resultados (COI): Estudo de Base do PROCAVA** <br> </span>
<span style='font-size:18pt;'> Agregados familiares
<span style='color:#008000;'>entrevistados </span>em comparação com os
<span style='color:#708090;'>planificados</span>
</span>",
caption = "Fonte: FAR-FP | PROCAVA")+
coord_cartesian(ylim = c(10, max(realizacoes$meta)+50)) +
coord_cartesian(xlim = c(10,  max(realizacoes$meta+10))) +
geom_shadowtext(
data = subset(realizacoes, meta < 8),
aes(meta, y = categoria, label = categoria),
hjust = 0, nudge_x = 0.3, colour = BLUE,
bg.colour = "white", bg.r = 0.2)+
geom_text(data = realizacoes, mapping = aes(x = realizado, y = categoria, label = realizado), hjust = 1.5, nudge_x = -0.2, color = 'lightgreen', fontface = 'bold', size = 7)
}  ########### CHART FUNCTION
participantes <- read.fst("C:\\Users\\BZunguze\\OneDrive - ACQUABUILD\\APPS 2022\\BASELINE\\BASELINE_SHINY\\respondentes.fst")
rever <- participantes
rever <- rever %>% dplyr::filter(!is.na(nome_inq)) %>% group_by(nome_inq) %>%
summarise(realizados = round(fndistinct(codigo)/fndistinct(data_entrevista),2)) %>%
arrange(-realizados) %>%
head(10) %>%
mutate(
color = case_when(
row_number() == 1 ~ "#008000",
row_number() == 2 ~ "#32CD32",
row_number() == 3 ~ "#7CFC00",
row_number() >= 9 ~ "#FFC300",
TRUE ~ "gray70"))
rever %>%  mutate(nome_inq = fct_reorder(nome_inq, realizados)) %>%
head(10) %>%
ggplot(aes(x = nome_inq, y = realizados, fill = color)) +
geom_col() +
coord_flip()+
geom_text(aes(label = realizados),  hjust = 1.5, nudge_x = -.5, vjust = -3.0) +
scale_fill_identity(guide = "none") +
theme_void()+
theme(axis.text.y = element_text(size = 12, angle = 0, vjust=0, hjust=0))
bullet_chart(rever)
n_distinct(entrevistados$hh_id)
entrevists <- entrevistados %>% group_by(provincia_inq, cadeia_valor) %>%
summarise(n_distinct(hh_id)) %>%
spread(cadeia_valor, -provincia_inq) %>%
adorn_totals(c("col", "row"))
agregados <- Respondentes %>%
left_join(administrativa %>% dplyr::select(-localidade, -distrito)%>% dplyr::select(admin_id = id, everything()), by = "admin_id")
Agregados_Familiares <- agregados %>%
group_by(posto_id, Distrito = distrito, Posto = posto_administrativo) %>%
summarize(Beneficiarios = n_distinct(codigo)) %>%
dplyr::filter(!is.na(posto_id))
postos_administrativos =st_read("C:\\Users\\BZunguze\\OneDrive - ACQUABUILD\\APPS 2022\\BASELINE\\BASELINE_SHINY\\posto_2024.shp") %>%
st_make_valid() %>% dplyr::select(-Shape_Leng)
Distritos  <- ms_dissolve(postos_administrativos, field = c("ADM2_PT"))
Districts <- st_simplify(Distritos, preserveTopology = TRUE, dTolerance = 100)
posts <- st_simplify(postos_administrativos, preserveTopology = FALSE, dTolerance = 200) %>%
left_join(realizados, by = "posto_id")
Linha_base <- Geocoded_Households %>% dplyr::filter(!is.na(latitude)) %>% st_as_sf(coords = c('longitude', 'latitude'), crs = "WGS84")
Linha_base$tratamento <- as.factor(Linha_base$tratamento)
selected <- seleccao %>% dplyr::filter(!is.na(latitude)) %>%  st_as_sf(coords = c('longitude', 'latitude'), crs = "WGS84")
# realizados <- realizados %>% left_join()
##################### OUTREACH_DATASET <-
# colnames(posts)
Breaks <- c(0, 1 ,25, 50, 75, 100, 150, 200, 250, Inf)
Labels <-c("0", "1-25" ,"25-50", "50-75", "75-100", "100-150", "150-200", "200-250","250+")
tm_basemap(server = "OpenStreetMap") +
tm_shape(posts, is.master = FALSE) + tm_borders(alpha = 0)+
tm_polygons("Total",
id = toupper("ADM2_PT"),
palette = "BrBG", n = 9, contrast = c(0.3, 1),
breaks = Breaks,
borders = NULL,
colorNA = NULL,
legend.is.portrait = FALSE,
labels = Labels,
popup.vars=c("Distrito:"="ADM2_PT",
"Posto Administrativo:"="ADM3_PT",
"AF Assistidos:"="Total",
"AF Assistidos:"="Homens Adultos",
"AF Assistidos:"="Homens Jovens",
"AF Assistidos:"="Mulheres Adultos",
"AF Assistidos:"="Mulheres Jovens"),
style = "fixed",
title = "AF alcançados",
alpha = 0.5,
legend.stack = "horizontal")+
tm_shape(Linha_base) +
tm_dots("Linha de Base", col="tratamento", size = c(.001), scale = 5,
shape ="tratamento",
popup.vars = c("Distrito:" = "distrito",
"Tipologia:" = "tratamento",
"Membros do AF:" = "hh_members",
# "Nome:" = "nome",
"Sexo:" = "sexo",
"Idade:" = "idade",
"Código do AF:" = "codigo"),
# labels = c("Tratamento", "Controlo"),
palette=c("red", "green"))+
tm_symbols(size = "hh_members", title.size = "Membros do AF:",
shape = "tratamento", title.shape = "Tipo:")+
tm_shape(selected) +
tm_dots(
group = "sexo",
col = "papel",
palette = "Reds",
popup.vars = c("Distrito:" = "distrito", "Nome:" = "nome", "Sexo:" = "sexo", "Nascimento:" = "ano", "Localidade:" = "localidade", "Povoado:" = "povoado", "Papel:" = "papel", "Propostas:" = "proposta")
) +
############ Classify these bubles into treatment and control
tm_view(set.view = c(lon = 37.33, lat = -16.88, zoom = 9))+
qtm(Districts,
fill = NULL,
text = "ADM2_PT",
text.size = 1.7,
text.col = "#A9A9A9",
fillCol = "ADM2_PT",
borders = "#C0C0C0", scale = 1, polygons.id = "ADM2_PT")+
tm_layout(legend.outside.position = "bottom",
legend.outside.size = 0.35,
legend.outside = TRUE)
# colnames(Linha_base)
